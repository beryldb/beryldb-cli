#!/usr/bin/env perl

# Emerald - A POSIX client for BerylDB.
# http://www.beryldb.com
#
# Copyright (C) 2021 Carlos F. Ferry <cferry@beryldb.com>
# 
# This file is part of BerylDB. BerylDB is free software: you can
# redistribute it and/or modify it under the terms of the BSD License
# version 3.
#
# More information about our licensing can be found at https://docs.beryl.dev

use v5.10.0;
use strict;
use warnings FATAL => qw(all);

use Cwd                   qw(getcwd);
use File::Basename        qw(basename);
use File::Copy            ();
use File::Spec::Functions qw(abs2rel catfile catdir rel2abs);
use FindBin               qw($RealDir);
use Getopt::Long          qw(GetOptions);
use POSIX                 qw(getgid getuid);

use lib $RealDir;

use make::utils;
use make::configure;
use make::brld;
use make::environment;

my ($set_RealDir,
    $set_data_dir,
    $set_db_dir,
    $set_development,
    $set_disable_interactive,
    $set_distribution_label,
    $set_example_dir,
    $set_gid,
    $set_log_dir,
    $set_manual_dir,
    $set_portable,
    $set_prefix,
    $set_runtime_dir,
    $set_script_dir,
    $set_system,
    $set_uid);

exit 1 unless GetOptions(
	'clean'  => \&cmd_clean,
	'help'	 => \&cmd_help,
	'update' => \&cmd_update,

	'config-dir=s'         => \$set_RealDir,
	'data-dir=s'           => \$set_data_dir,
	'development'          => \$set_development,
	'disable-interactive'  => \$set_disable_interactive,
	'distribution-label=s' => \$set_distribution_label,
	'example-dir=s'        => \$set_example_dir,
	'gid=s'                => \$set_gid,
	'log-dir=s'            => \$set_log_dir,
	'manual-dir=s'         => \$set_manual_dir,
	'portable'             => \$set_portable,
	'prefix=s'             => \$set_prefix,
	'runtime-dir=s'        => \$set_runtime_dir,
	'script-dir=s'         => \$set_script_dir,
	'system'               => \$set_system,
	'uid=s'                => \$set_uid,
);

our $interactive_setup = !(
	!-t STDIN ||
	!-t STDOUT ||
	defined $set_RealDir ||
	defined $set_data_dir ||
	defined $set_development ||
	defined $set_distribution_label ||
	defined $set_example_dir ||
	defined $set_gid ||
	defined $set_log_dir ||
	defined $set_manual_dir ||
	defined $set_portable ||
	defined $set_prefix ||
	defined $set_runtime_dir ||
	defined $set_script_dir ||
	defined $set_system ||
	defined $set_uid
);

my %config;

my %version = get_version $set_distribution_label;

my $distro = "";

if ($^O ne 'linux')
{

}
else
{
	$distro = get_distro_version();
}

my $welcome = "Setting up Beryl-cli $version{FULL} for GNU/" . ucfirst($^O) . " " . $distro;

say brld_format "\n<|BOLD $welcome |>\n";

if ($interactive_setup) 
{
	%config = read_config_file(CONF_CACHEFILE);
	run_test abs2rel(CONF_CACHEFILE, $RealDir), %config;

	if (!defined $config{VERSION}) 
	{
		$config{VERSION} = CONFIGURE_CACHE_VERSION;
	} 
	elsif ($config{VERSION} != CONFIGURE_CACHE_VERSION) 
	{
		show_warning "ignoring contents of ${\CONF_CACHEFILE} as it was generated by an incompatible version of $0!";
		%config = ('VERSION', CONFIGURE_CACHE_VERSION);
	}
}

$config{CXX} = locate_compiler($config{CXX} // $ENV{CXX});

unless ($config{CXX}) 
{
	say 'Unable to find a C++ compiler';

	unless ($interactive_setup) 
	{
		say 'You must set the CXX environment to a valid C++ compiler.';
		exit 1;
	}
	
	until ($config{CXX}) 
	{
		my $compiler_path = prompt_string 1, 'You must specify a valid C++ compiler path:', 'c++';
		$config{CXX} = locate_compiler $compiler_path;
	}
}

my %compiler = retrieve_compiler($config{CXX});

strict_test 'sys/stat.h',   test_header $config{CXX}, 'sys/stat.h';
strict_test 'sys/types.h',   test_header $config{CXX}, 'sys/types.h';
strict_test 'sys/socket.h',   test_header $config{CXX}, 'sys/socket.h';
strict_test 'signal.h', test_header $config{CXX}, 'signal.h';
strict_test 'getopt.h', test_header $config{CXX}, 'getopt.h';
strict_test 'pwd.h',   test_header $config{CXX}, 'pwd.h';
strict_test 'dlfcn.h', test_header $config{CXX}, 'dlfcn.h';
strict_test 'stdlib.h', test_header $config{CXX}, 'stdlib.h';
strict_test 'netinet/tcp.h', test_header $config{CXX}, 'netinet/tcp.h';
strict_test 'dirent.h', test_header $config{CXX}, 'dirent.h';
strict_test 'unistd.h', test_header $config{CXX}, 'unistd.h';

$config{CLOCK_GETTIME_OK} = run_test 'clock_gettime()', verify_file($config{CXX}, 'clock_gettime.cpp', '-lrt -std=c++14');
$config{CORE_COUNT} = get_cpu_count();

strict_test 'poll', test_header $config{CXX}, 'sys/poll.h';

print "\n";
print_ok "Dependency test passed. Beryl-cli is now ready to be configured.\n";

if (defined $set_portable) 
{
	show_error '--portable and --system have a conflict and should be ran together.' if defined $set_system;
	$config{DESTDIR}     = catfile $RealDir, 'run', '';
	$config{BASE_DIR}    = $set_prefix      // '';
	$config{CONFIG_DIR}  = $set_RealDir  // 'conf';
	$config{DATA_DIR}    = $set_data_dir    // 'data';
	$config{EXAMPLE_DIR} = $set_example_dir // catdir $config{CONFIG_DIR}, 'examples';
	$config{LOG_DIR}     = $set_log_dir     // 'logs';
	$config{MANUAL_DIR}  = $set_manual_dir  // 'manuals';
	$config{RUNTIME_DIR} = $set_runtime_dir // $config{DATA_DIR};
	$config{SCRIPT_DIR}  = $set_script_dir  // $config{BASE_DIR};
} 
elsif (defined $set_system) 
{
	$config{BASE_DIR}    = $set_prefix      // '/';
	$config{CONFIG_DIR}  = $set_RealDir  // '/etc/beryl';
	$config{DATA_DIR}    = $set_data_dir    // '/var/lib/beryl';
	$config{EXAMPLE_DIR} = $set_example_dir // '/usr/share/doc/beryl';
	$config{LOG_DIR}     = $set_log_dir     // '/var/log/beryl';
	$config{MANUAL_DIR}  = $set_manual_dir  // '/usr/share/man/man1';
	$config{RUNTIME_DIR} = $set_runtime_dir // '/var/run';
	$config{SCRIPT_DIR}  = $set_script_dir  // '/usr/share/beryl';
} 
else 
{
	$config{BASE_DIR}    = rel2abs $set_prefix // $config{BASE_DIR}    // catdir $RealDir,            'run';
	$config{CONFIG_DIR}  = $set_RealDir     // $config{CONFIG_DIR}  // catdir $config{BASE_DIR},   'conf';
	$config{DATA_DIR}    = $set_data_dir       // $config{DATA_DIR}    // catdir $config{BASE_DIR},   'data';
	$config{EXAMPLE_DIR} = $set_example_dir    // $config{EXAMPLE_DIR} // catdir $config{CONFIG_DIR}, 'examples';
	$config{LOG_DIR}     = $set_log_dir        // $config{LOG_DIR}     // catdir $config{BASE_DIR},   'logs';
	$config{MANUAL_DIR}  = $set_manual_dir     // $config{MANUAL_DIR}  // catdir $config{BASE_DIR},   'manuals';
	$config{RUNTIME_DIR} = $set_runtime_dir    // $config{RUNTIME_DIR} // $config{DATA_DIR};
	$config{SCRIPT_DIR}  = $set_script_dir     // $config{SCRIPT_DIR}  // $config{BASE_DIR};
}

my @group;

if (defined $set_gid) 
{
	@group = $set_gid =~ /^\d+$/ ? getgrgid($set_gid) : getgrnam($set_gid);
	show_error "Gid '$set_gid' not found." unless @group;
} 
else 
{
	@group = $set_system ? getgrnam('beryl') : getgrgid($config{GID} // getgid());
	show_error "you need to specify a group to run as using '--gid [id|name]'!" unless @group;

	unless ($group[2]) 
	{
		show_warning <<"EOW";
You are trying to compile BerylDB on priviliged $group[0] group and it is not clear which
unprivileged group to run BerylDB as.

In order to solve this issue, you should create create a new
unprivileged user/group, which will allow you to build and run, you may also pass the '--gid [id|name]' flag thus
specifing what unprivileged group to run as.
EOW
		if (!prompt_bool $interactive_setup, "Are you sure you want to are going to build BerylDB in the $group[0] group?", 0) 
		{
			say STDERR "If you need to build BerylDB in the $group[0] group, you must pass the --gid $group[2] flag." unless $interactive_setup;
			exit 1;
		}
	}
}
$config{GROUP} = $group[0];
$config{GID}   = $group[2];

my @user;

if (defined $set_uid) 
{
	@user = $set_uid =~ /^\d+$/ ? getpwuid($set_uid) : getpwnam($set_uid);
	show_error "UID '$set_uid' not found in the system." unless @user;
} 
else 
{
	@user = $set_system ? getpwnam('beryl') : getpwuid($config{UID} // getuid());
	show_error "you need to specify a user to run as using '--uid [id|name]'!" unless @user;
	
	unless ($user[2]) 
	{
		show_warning <<"EOW";
You are trying to compile BerylDB on priviliged $user[0] user and have not specified
an unprivileged user to run BerylDB as.

In order to solve this issue, you should create create a new
unprivileged user/group, which will allow you to build and run, you may also pass the '--gid [id|name]' flag thus
specifing what unprivileged group to run as.
EOW
		if (!prompt_bool $interactive_setup, "Would you like to build as the $user[0] user?", 0) 
		{
			say STDERR "If you need to build BerylDB in the $group[0] group, you must pass the --gid $group[2] flag." unless $interactive_setup;
			exit 1;
		}
	}
}
$config{USER} = $user[0];
$config{UID}  = $user[2];

if (-e '/proc/user_beancounters' || -e '/proc/vz/vzaquota') 
{
	show_warning <<'EOW';
You are building BerylDB in an OpenVZ container. Keep in mind that if you desire
to build BerylDB in this VZ, you must make sure that the NTP is properly configured
on the hardware node.
EOW
}

if ($^V lt 'v5.26.0') 
{
	show_warning <<"EOW";
You are building BerylDB with Perl $^V. This version is not supported by Beryl.
Please consider updating to Perl v5.26 or newer.
EOW
}

my %future_compilers = (
	AppleClang => version->parse('10.0'),
	Clang      => version->parse('5.0'),
	GCC        => version->parse('7.0'),
);

if (exists $future_compilers{$compiler{NAME}} && $compiler{VERSION} lt $future_compilers{$compiler{NAME}}) 
{
	show_warning <<"EOW";
You are building BerylDB with $compiler{NAME} v$compiler{VERSION}. This compiter is
outdated and will not be supported by the next version of BerylDB. Please consider
updating to $compiler{NAME} v$future_compilers{$compiler{NAME}} or newer.
EOW
}

if (defined $version{REAL_LABEL}) 
{
	show_warning <<'EOW';
You are about to compile a beta (release candidate) version. A beta version contains
source code that has not been tested as extensively and may contain various issues.
EOW
	if (!prompt_bool $interactive_setup, 'Do you understand?', $set_development // 0) 
	{
		say STDERR 'If you accept this condition, you need to pass the --development flag.' unless $interactive_setup;
		exit 1;
	}
}

my $question = <<"EOQ";
\nberyl-cli is configured with the following paths:

<|BOLD Config:|> $config{CONFIG_DIR}
<|BOLD Data:|>   $config{DATA_DIR}
<|BOLD Log:|>    $config{LOG_DIR}
<|BOLD Manual:|> $config{MANUAL_DIR}
<|BOLD Script:|> $config{SCRIPT_DIR}

Would you like to change these settings?
EOQ
if (prompt_bool $interactive_setup, $question, 0) 
{
	my $root_basedir = $config{BASE_DIR};
	$config{BASE_DIR} = interactive_dir $interactive_setup, 'Please choose a directory to install BerylDB', $config{BASE_DIR};
	
	for my $key (qw(CONFIG_DIR DATA_DIR LOG_DIR MANUAL_DIR SCRIPT_DIR)) 
	{
		$config{$key} =~ s/^\Q$root_basedir\E/$config{BASE_DIR}/;
	}
	
	$config{CONFIG_DIR} = interactive_dir $interactive_setup, 'Choose a directory for configuration files', $config{CONFIG_DIR};
	$config{DATA_DIR}   = interactive_dir $interactive_setup, 'Choose a directory for data files', $config{DATA_DIR};
	$config{LOG_DIR}    = interactive_dir $interactive_setup, 'Choose a directory for log files',           $config{LOG_DIR};
	$config{MANUAL_DIR} = interactive_dir $interactive_setup, 'Choose a directory for manual files',        $config{MANUAL_DIR};
	$config{SCRIPT_DIR} = interactive_dir $interactive_setup, 'Choose a directory for scripts files',             $config{SCRIPT_DIR};
	$config{EXAMPLE_DIR} = $config{CONFIG_DIR} . '/examples';
	$config{RUNTIME_DIR} = $config{DATA_DIR};
}

$config{DISTRIBUTION} = $set_distribution_label if $set_distribution_label;

define_conf_cache %config;
process_make \%config, \%compiler, \%version;

print brld_format <<"EOM";

Configuration has finished. 
These are the settings you are building BerylDB with:

<|BOLD Compiler:|>\n
  <|GREEN Binary:|>  $config{CXX}
  <|GREEN Name:|>    $compiler{NAME}
  <|GREEN Version:|> $compiler{VERSION}

EOM


my @arguments;
push @arguments, "-C${\abs2rel $RealDir}" unless getcwd eq $RealDir;
push @arguments, "-j${\(get_cpu_count() + 1)}";

print brld_format <<"EOM";

<|BOLD Paths:|>\n
  <|GREEN Config:|>  $config{CONFIG_DIR}
  <|GREEN Data:|>    $config{DATA_DIR}
  <|GREEN Example:|> $config{EXAMPLE_DIR}
  <|GREEN Log:|>     $config{LOG_DIR}
  <|GREEN Manual:|>  $config{MANUAL_DIR}
  <|GREEN Runtime:|> $config{RUNTIME_DIR}
  <|GREEN Script:|>  $config{SCRIPT_DIR}

<|GREEN Execution Group:|> $config{GROUP} ($config{GID})
<|GREEN Execution User:|>  $config{USER} ($config{UID})

EOM

my $make_using = "make";

if ($^O eq "freebsd")
{
        $make_using = "gmake";
}

print brld_format <<"EOM";
Configure completed, in order to compile Beryl-cli run: '<|GREEN $make_using ${\join ' ', @arguments} install|>'
EOM
